close_ret:
  func_name: "ret"
  desc: "收益率"
  args:
    - "close"
  kwargs:
    shift: 1
  param_scan:
    -
      - ["shift", [1, 5, 10, 20, 60, 100]]

pv_corr:
  func_name: "ts_corr"
  desc: "价量之间相关性" 
  args: 
    - "close"
    - "vol"
  kwargs: {}
  param_scan:
    -
      - ['window', [10, 20, 40, 60, 100]]

# td_pv_corr:
#   formula: "ts_corr(ffill_na(vwap), vol, window=5*20)"
#   desc: "价量之间相关性"
#   param_scan:
#     -
#       - ['window', [10, 20, 40, 60, 100, 200]]

# ret_v_prod:
#   formula: "ts_rank(mul(ret(close), vol), window=5*20)"
#   desc: "收益率和成交量关系"
#   param_scan:
#     -
#       - ['window', [10, 20, 40, 60, 100, 200]]



# td_ret_v_prod:
#   formula: "ts_rank(mul(ret(ffill_na(vwap)), vol), window=5*20)"
#   desc: "加权成交价收益和成交量关系"
#   param_scan:
#     -
#       - ['window', [10, 20, 40, 60, 100, 200]]

# td_p_v_ratio:
#   formula: "ts_rank(fill_na(div(delta(ffill_na(vwap), shift=1), ts_sum(vol, window=1))), window=1*20)"
#   desc: "加权成交价变动与成交量比值"
#   param_scan:
#     -
#       - ['window', [10, 20, 60, 100]]
#     -
#       - ['shift', [1, 5]]
#     -
#       - ['window', [1, 5]]

# ohlc_rat:
#   func_name: "ohlc_rat"
#   args:
#     - "open"
#     - "high"
#     - "low"
#     - "close"
#   kwargs: {window: 3*20}
#   desc: "收开价格的相对变化"
#   param_scan:
#     -
#       - ['window', [10, 20, 60, 100, 300, 600]]


# clh:
#   formula: "div(sub(add(close, close), add(low, high)), avoid_zero(sub(high, low)) )"
#   desc: "高收价格以及收低价格的相对变化之差"


# clh_delta:
#   formula: "delta( div( sub(add(close, close), add(low, high)), avoid_zero(sub(high, low)) ) )"
#   desc: "高收价格以及收低价格的相对变化之差的变化"
#   param_scan:
#     -
#       - ['shift', [1, 3, 5, 10, 20, 100]]


# td_buy_rank:
#   formula: "ts_rank(fill_na(mul(td_buy_p, td_buy_v), fill_num=0.), window=5*20)"
#   desc: "主动买入资金的时序截面排名"
#   param_scan:
#     -
#       - ['window', [10, 20, 60, 100, 300, 600]]

# td_sell_rank:
#   formula: "ts_rank(fill_na(mul(td_sell_p, td_sell_v), fill_num=0.), window=5*20)"
#   desc: "主动卖出资金的时序截面排名"
#   param_scan:
#     -
#       - ['window', [10, 20, 60, 100, 300, 600]]


# close_adjusted:
#   # formula: "fill_na( div(sub(close, ts_mean(close, window=5*20)), ts_std(close, window=5*20)) )"
#   formula: 'close_adjusted(close, window=5*20)'
#   desc: "标准化的收盘价"
#   param_scan:
#     -
#       - ['window', [10, 20, 60, 100, 300, 600]]

# ret_skew:
#   formula: "ts_skew(ret(close, shift=20), window=5*20)"
#   desc: "收益率的偏度"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]
#     -
#       - ['shift', [1, 5, 10, 20, 100]]
      

# ret_kurt:
#   formula: "ts_kurt(ret(close, shift=20), window=5*20)"
#   desc: "收益率的峰度"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]
#     -
#       - ['shift', [1, 5, 10, 20, 100]]

# retail_dir_tsrank:
#   formula: "ts_rank( fill_na( div( sub(add(mid_ab_m, sm_ab_m), add(mid_as_m, sm_as_m)), add(add(mid_ab_m, sm_ab_m), add(mid_as_m, sm_as_m)) ), window=10*20 ))"
#   desc: "散户买卖资金方向的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# retail_dir_rowrank:
#   formula: "rowrank( fill_na( div( sub(add(mid_ab_m, sm_ab_m), add(mid_as_m, sm_as_m)), add(add(mid_ab_m, sm_ab_m), add(mid_as_m, sm_as_m)) ) ) )"
#   desc: "散户买卖资金方向的横维度排名"
  

# OB_price_2derivative:
#   formula: "div(sub(add(bs_avg_price, move(bs_avg_price, shift=2)) , add(move(bs_avg_price, shift=1), move(bs_avg_price, shift=1))), bs_avg_price)"
#   desc: "订单簿平均价的二阶导数"

# OB_price_2derivative_tsrank:
#   formula: "ts_rank(sub(add(bs_avg_price, move(bs_avg_price, shift=2)) , add(move(bs_avg_price, shift=1), move(bs_avg_price, shift=1))), window=5*20)"
#   desc: "订单簿平均价的二阶导数的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# wb1_tsrank:
#   formula: "ts_rank(wb1, window=5*20)"
#   desc: "1档委比的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# wb5_tsrank:
#   formula: "ts_rank(wb5, window=5*20)"
#   desc: "5档委比的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# wb10_tsrank:
#   formula: "ts_rank(wb10, window=5*20)"
#   desc: "10档委比的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# td_v_ratio:
#   formula: "ts_rank(fill_na(div(sub(td_buy_v, td_sell_v), add(td_buy_v, td_sell_v))), window=5*20)"
#   desc: "买卖成交量的相对比值的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# en_b_p10_tsrank:
#   formula: "ts_rank(div(bbv10_sum, bv10_sum), window=5*20)"
#   desc: "10档量加权挂单买入价的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# en_s_p10_tsrank:
#   formula: "ts_rank(div(ssv10_sum, sv10_sum), window=5*20)"
#   desc: "10档量加权挂单卖出价的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# en_b_ret10_tsrank:
#   formula: "ts_rank(ret(div(bbv10_sum, bv10_sum)), window=5*20)"
#   desc: "10档量加权挂单买入价的变化率的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# en_s_ret10_tsrank:
#   formula: "ts_rank(ret(div(ssv10_sum, sv10_sum)), window=5*20)"
#   desc: "10档量加权挂单卖出价的变化率的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]


# en_b_p5_tsrank:
#   formula: "ts_rank(div(bbv5_sum, bv5_sum), window=5*20)"
#   desc: "5档量加权挂单买入价的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# en_s_p5_tsrank:
#   formula: "ts_rank(div(ssv5_sum, sv5_sum), window=5*20)"
#   desc: "5档量加权挂单卖出价的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# en_b_ret5_tsrank:
#   formula: "ts_rank(ret(div(bbv5_sum, bv5_sum)), window=5*20)"
#   desc: "5档量加权挂单买入价的变化率的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# en_s_ret5_tsrank:
#   formula: "ts_rank(ret(div(ssv5_sum, sv5_sum)), window=5*20)"
#   desc: "5档量加权挂单卖出价的变化率的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# bs_v1_tsrank:
#   formula: "ts_rank(sub(bv1_sum, sv1_sum), window=5*20)"
#   desc: "1档买卖挂单量差的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# bs_v5_tsrank:
#   formula: "ts_rank(sub(bv5_sum, sv5_sum), window=5*20)"
#   desc: "5档买卖累计挂单量差的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# bs_pv1_tsrank:
#   formula: "ts_rank(sub(bbv1_sum, ssv1_sum), window=5*20)"
#   desc: "1档买卖累计挂单金额差的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# bs_pv5_tsrank:
#   formula: "ts_rank(sub(bbv5_sum, ssv5_sum), window=5*20)"
#   desc: "5档买卖累计挂单金额差的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]


# en_bs_price_diff:
#   formula: "div(sub(fill_na_v2(en_buy_p, b1), fill_na_v2(en_sell_p, s1) ), bs_avg_price )"
#   desc: "委托买卖价差的相对比值,缺失值使用盘口数据填充"


# en_b_price_tsrank:
#   formula: "ts_rank(sub(fill_na_v2(en_buy_p, b1), bs_avg_price), window=5*20)"
#   desc: "委托买入价与盘口均价差的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# en_s_price_tsrank:
#   formula: "ts_rank(sub(fill_na_v2(en_sell_p, s1), bs_avg_price), window=5*20)"
#   desc: "委托卖出价与盘口均价差的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# en_b_sumprice_tsrank:
#   formula: "ts_rank( sub(avg_price(en_buy_p, en_buy_v, window=10), bs_avg_price), window=5*20)"
#   # formula: "ts_rank( sub(div(ts_sum(mul(en_buy_p, en_buy_v), window=10), ts_sum(en_buy_v, window=10)), bs_avg_price), window=5*20)"
#   desc: "半分钟内的平均委托买入价与盘口均价比值的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]
#     -
#       - ['window', [5, 10, 20, 60]]

# en_s_sumprice_tsrank:
#   formula: "ts_rank( sub(avg_price(en_sell_p, en_sell_v, window=10), bs_avg_price), window=5*20)"
#   # formula: "ts_rank( sub(div(ts_sum(mul(en_sell_p, en_sell_v), window=10), ts_sum(en_sell_v, window=10)), bs_avg_price), window=5*20)"
#   desc: "半分钟内的平均委托卖出价与盘口均价比值的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]
#     -
#       - ['window', [5, 10, 20, 60]]

# ct_b_med_tsrank:
#   formula: "ts_rank(fill_na(inv(ct_b_med)), window=5*20)"
#   desc: "买单撤单时间中位数的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# ct_s_med_tsrank:
#   formula: "ts_rank(fill_na(inv(ct_s_med)), window=5*20)"
#   desc: "卖单撤单时间中位数的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# can_en_v_ratio:
#   formula: "ts_rank(div(sub(add(en_buy_v, cancel_sell_v), add(en_sell_v, cancel_buy_v)), add(add(en_buy_v, cancel_sell_v), add(en_sell_v, cancel_buy_v))), window=5*20)"
#   desc: "买卖双方量的相对比值的时序截面排名，其中买方量为委托买单以及卖方撤单之和"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# can_en_v_ratio_fillna:
#   formula: "ts_rank(fill_na(div(sub(add(en_buy_v, cancel_sell_v), add(en_sell_v, cancel_buy_v)), add(add(en_buy_v, cancel_sell_v), add(en_sell_v, cancel_buy_v)))), window=5*20)"
#   desc: "买卖双方量的相对比值的时序截面排名，其中买方量为委托买单以及卖方撤单之和,缺失值进行了填充"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# can_en_pv_ratio:
#   formula: "ts_rank(div(sub(add(mul(en_buy_v, fill_na(en_buy_p)), cancel_sell_m), add(mul(en_sell_v, fill_na(en_sell_p)), cancel_buy_m)), add(add(mul(en_buy_v, fill_na(en_buy_p)), cancel_sell_m), add(mul(en_sell_v, fill_na(en_sell_p)), cancel_buy_m))), window=5*20)"
#   desc: "买卖双方金额的相对比值的时序截面排名，其中买方金额为委托买单以及卖方撤单之和"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# can_en_pv_ratio_fillna:
#   formula: "ts_rank(fill_na(div(sub(add(mul(en_buy_v, fill_na(en_buy_p)), cancel_sell_m), add(mul(en_sell_v, fill_na(en_sell_p)), cancel_buy_m)), add(add(mul(en_buy_v, fill_na(en_buy_p)), cancel_sell_m), add(mul(en_sell_v, fill_na(en_sell_p)), cancel_buy_m)))), window=5*20)"
#   desc: "买卖双方金额的相对比值的时序截面排名，其中买方金额为委托买单以及卖方撤单之和, 缺失值进行了填充"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]



# best_v_imbalance_tsrank:
#   formula: "ts_rank(best_v_imbalance(bv1_sum, b1, sv1_sum, s1, shift=1), window=3*20)"
#   desc: "最优买卖挂单量变化之差的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300]]
#     -
#       - ['shift', [1, 2, 3, 5, 10]]

# bs_press:
#   formula: "bs_press(press_buy_v, press_sell_v)"
#   desc: "买卖压力, 压力是根据挂单价格的倒数为权重的挂单量之和"

# OB_price_spread_tsrank:
#   formula: "ts_rank(sub(s1,b1), window=20)"
#   desc: "挂单价差的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# td_price_std:
#   formula: "ts_rank(ts_std(ffill_na(vwap), window=20), window=3*20)"
#   desc: "加权成交价的标准差的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]
#     -
#       - ['window', [10, 20, 60, 100]]

# en_b_price_std:
#   formula: "ts_rank(ts_std(en_buy_p, window=20), window=3*20)"
#   desc: "委托买入价的标准差的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]
#     -
#       - ['window', [10, 20, 60, 100]]

# en_s_price_std:
#   formula: "ts_rank(ts_std(en_sell_p, window=20), window=3*20)"
#   desc: "委托卖出价的标准差的时序截面排名"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]
#     -
#       - ['window', [10, 20, 60, 100]]

# en_v_order_inbalance:
#   formula: "fill_na(div(sub(en_buy_v, en_sell_v), add(en_buy_v, en_sell_v)))"
#   desc: "委托买卖量的相对比值"


# ## ======from other research
# trade_num_in_high_price:
#   formula: "trade_info_in_price_region(add(td_buy_n, td_sell_n), close, op=gt, window=5*20, perc=0.8)"
#   desc: "高价格区间成交笔数占比"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]
#       - ['perc', [0.7, 0.8, 0.9]]

# trade_vol_in_high_price:
#   formula: "trade_info_in_price_region(add(td_buy_v, td_sell_v), close, op=gt, window=5*20, perc=0.8)"
#   desc: "高价格区间成交笔数占比"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]
#       - ['perc', [0.7, 0.8, 0.9]]

# trade_avgvol_in_high_price:
#   formula: "trade_avgvol_in_price_region(add(td_buy_v, td_sell_v), add(td_buy_n, td_sell_n), close, op=gt, window=5*20, perc=0.8)"
#   desc: "高价格区间成交笔数占比"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]
#       - ['perc', [0.7, 0.8, 0.9]]


# trade_num_in_low_price:
#   formula: "trade_info_in_price_region(add(td_buy_n, td_sell_n), close, op=lt, window=5*20, perc=0.2)"
#   desc: "高价格区间成交笔数占比"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]
#       - ['perc', [0.1, 0.2, 0.3]]

# trade_vol_in_low_price:
#   formula: "trade_info_in_price_region(add(td_buy_v, td_sell_v), close, op=lt, window=5*20, perc=0.2)"
#   desc: "高价格区间成交笔数占比"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]
#       - ['perc', [0.1, 0.2, 0.3]]

# trade_avgvol_in_low_price:
#   formula: "trade_avgvol_in_price_region(add(td_buy_v, td_sell_v), add(td_buy_n, td_sell_n), close, op=lt, window=5*20, perc=0.2)"
#   desc: "高价格区间成交笔数占比"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]
#       - ['perc', [0.1, 0.2, 0.3]]

# ret_v_corr:
#   formula: "ts_corr(ret(close), vol, window=5*20)"
#   desc: "收益率和成交量之间的相关性"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# ret_n_corr:
#   formula: "ts_corr(ret(close), add(td_buy_n, td_sell_n), window=5*20)"
#   desc: "收益率和成交笔数之间的相关性"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# ret_avgvol_corr:
#   formula: "ts_corr(ret(close), fill_na(div(vol, add(td_buy_n, td_sell_n))), window=5*20)"
#   desc: "收益率和成交均量之间的相关性"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# pv_corr:
#   formula: "ts_corr(ret(close), vol, window=5*20)"
#   desc: "价量之间相关性"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# price_n_corr:
#   formula: "ts_corr(ret(close), add(td_buy_n, td_sell_n), window=5*20)"
#   desc: "价格和成交笔数之间的相关性"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# price_avgvol_corr:
#   formula: "ts_corr(ret(close), fill_na(div(vol, add(td_buy_n, td_sell_n))), window=5*20)"
#   desc: "价格和成交均量之间的相关性"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# HCVOL:
#   formula: "HCVOL(ffill_na(td_buy_p), close, td_buy_v, window=5*20)"
#   desc: "买入浮亏的交易量占比"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# LCVOL:
#   formula: "LCVOL(ffill_na(td_sell_p), close, td_sell_v, window=5*20)"
#   desc: "卖出反弹浮亏的交易量占比"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# HCP:
#   formula: "HCP(ffill_na(td_buy_p), close, window=5*20)"
#   desc: "买入浮亏的价格偏离程度"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# LCP:
#   formula: "LCP(ffill_na(td_sell_p), close, window=5*20)"
#   desc: "卖出反弹的价格偏离程度"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# LI:
#   formula: "LI(close, window=5*20)"
#   # formula: "div(ts_std(close, window=5*20), ts_mean(close, window=5*20))"
#   desc: "成交价格流动性指标"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

 
# VLI:
#   formula: "div(ts_std(vol, window=5*20), ts_mean(vol, window=5*20))"
#   desc: "成交量流动性指标"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# bs_power_rough:
#   formula: "bs_power_rough(en_buy_v, en_buy_p, en_sell_v, en_sell_p, close, window=20)"
#   desc: "买卖委托力量的粗略估计"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]

# bs_td_power_rough:
#   formula: "bs_power_rough(td_buy_v, td_buy_p, td_sell_v, td_sell_p, close, window=20)"
#   desc: "买卖成交力量的粗略估计"
#   param_scan:
#     -
#       - ['window', [20, 60, 100, 300, 600]]